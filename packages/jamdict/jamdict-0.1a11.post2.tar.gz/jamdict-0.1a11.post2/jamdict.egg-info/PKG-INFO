Metadata-Version: 2.1
Name: jamdict
Version: 0.1a11.post2
Summary: Python library for using Japanese dictionaries and resources (Jim Breen's JMdict, KanjiDic2, KRADFILE, JMnedict)
Home-page: https://github.com/neocl/jamdict
Author: Le Tuan Anh
Author-email: tuananh.ke@gmail.com
License: MIT License
Project-URL: Bug Tracker, https://github.com/neocl/jamdict/issues
Project-URL: Source Code, https://github.com/neocl/jamdict/
Description: # Jamdict
        
        [Jamdict](https://github.com/neocl/jamdict) is a Python 3 library for manipulating Jim Breen's JMdict, KanjiDic2, JMnedict and kanji-radical mappings.
        
        [![ReadTheDocs Badge](https://readthedocs.org/projects/jamdict/badge/?version=latest&style=plastic)](https://jamdict.readthedocs.io/)
        
        **Documentation:** https://jamdict.readthedocs.io/ 
        
        # Main features
        
        * Support querying different Japanese language resources
          - Japanese-English dictionary JMDict
          - Kanji dictionary KanjiDic2
          - Kanji-radical and radical-kanji maps KRADFILE/RADKFILE
          - Japanese Proper Names Dictionary (JMnedict) 
        * Fast look up (dictionaries are stored in SQLite databases)
        * Command-line lookup tool [(Example)](#command-line-tools)
        
        [Contributors](#contributors) are welcome! üôá. If you want to help, please see [Contributing](https://jamdict.readthedocs.io/en/latest/contributing.html) page.
        
        # Try Jamdict out
        
        Jamdict is used in [Jamdict-web](https://jamdict.herokuapp.com/) - a web-based free and open-source Japanese reading assistant software.
        Please try out the demo instance online at:
        
        https://jamdict.herokuapp.com/
        
        There also is a demo [Jamdict virtual machine](https://replit.com/@tuananhle/jamdict-demo) online for trying out Jamdict Python code on Repl.it:
        
        https://replit.com/@tuananhle/jamdict-demo
        
        # Installation
        
        Jamdict & Jamdict database are both available on [PyPI](https://pypi.org/project/jamdict/) and can be installed using pip
        
        ```bash
        pip install --upgrade jamdict jamdict-data
        ```
        
        # Sample jamdict Python code
        
        ```python
        from jamdict import Jamdict
        jam = Jamdict()
        
        # use wildcard matching to find anything starts with È£ü„Åπ and ends with „Çã
        result = jam.lookup('È£ü„Åπ%„Çã')
        
        # print all word entries
        for entry in result.entries:
             print(entry)
        
        # [id#1358280] „Åü„Åπ„Çã (È£ü„Åπ„Çã) : 1. to eat ((Ichidan verb|transitive verb)) 2. to live on (e.g. a salary)/to live off/to subsist on
        # [id#1358300] „Åü„Åπ„Åô„Åé„Çã (È£ü„ÅπÈÅé„Åé„Çã) : to overeat ((Ichidan verb|transitive verb))
        # [id#1852290] „Åü„Åπ„Å§„Åë„Çã (È£ü„Åπ‰ªò„Åë„Çã) : to be used to eating ((Ichidan verb|transitive verb))
        # [id#2145280] „Åü„Åπ„ÅØ„Åò„ÇÅ„Çã (È£ü„ÅπÂßã„ÇÅ„Çã) : to start eating ((Ichidan verb))
        # [id#2449430] „Åü„Åπ„Åã„Åë„Çã (È£ü„ÅπÊéõ„Åë„Çã) : to start eating ((Ichidan verb))
        # [id#2671010] „Åü„Åπ„Å™„Çå„Çã (È£ü„ÅπÊÖ£„Çå„Çã) : to be used to eating/to become used to eating/to be accustomed to eating/to acquire a taste for ((Ichidan verb))
        # [id#2765050] „Åü„Åπ„Çâ„Çå„Çã (È£ü„Åπ„Çâ„Çå„Çã) : 1. to be able to eat ((Ichidan verb|intransitive verb)) 2. to be edible/to be good to eat ((pre-noun adjectival (rentaishi)))
        # [id#2795790] „Åü„Åπ„Åè„Çâ„Åπ„Çã (È£ü„ÅπÊØî„Åπ„Çã) : to taste and compare several dishes (or foods) of the same type ((Ichidan verb|transitive verb))
        # [id#2807470] „Åü„Åπ„ÅÇ„Çè„Åõ„Çã (È£ü„ÅπÂêà„Çè„Åõ„Çã) : to eat together (various foods) ((Ichidan verb))
        
        # print all related characters
        for c in result.chars:
            print(repr(c))
        
        # È£ü:9:eat,food
        # Âñ∞:12:eat,drink,receive (a blow),(kokuji)
        # ÈÅé:12:overdo,exceed,go beyond,error
        # ‰ªò:5:adhere,attach,refer to,append
        # Âßã:8:commence,begin
        # Êéõ:11:hang,suspend,depend,arrive at,tax,pour
        # ÊÖ£:14:accustomed,get used to,become experienced
        # ÊØî:4:compare,race,ratio,Philippines
        # Âêà:6:fit,suit,join,0.1
        ```
        
        ## Command line tools
        
        To make sure that jamdict is configured properly, try to look up a word using command line
        
        ```bash
        python3 -m jamdict lookup Ë®ÄË™ûÂ≠¶
        ========================================
        Found entries
        ========================================
        Entry: 1264430 | Kj:  Ë®ÄË™ûÂ≠¶ | Kn: „Åí„Çì„Åî„Åå„Åè
        --------------------
        1. linguistics ((noun (common) (futsuumeishi)))
        
        ========================================
        Found characters
        ========================================
        Char: Ë®Ä | Strokes: 7
        --------------------
        Readings: yan2, eon, Ïñ∏, Ng√¥n, Ng√¢n, „Ç≤„É≥, „Ç¥„É≥, „ÅÑ.„ÅÜ, „Åì„Å®
        Meanings: say, word
        Char: Ë™û | Strokes: 14
        --------------------
        Readings: yu3, yu4, eo, Ïñ¥, Ng·ªØ, Ng·ª©, „Ç¥, „Åã„Åü.„Çã, „Åã„Åü.„Çâ„ÅÜ
        Meanings: word, speech, language
        Char: Â≠¶ | Strokes: 8
        --------------------
        Readings: xue2, hag, Ìïô, HoÃ£c, „Ç¨„ÇØ, „Åæ„Å™.„Å∂
        Meanings: study, learning, science
        
        No name was found.
        ```
        
        ## Using KRAD/RADK mapping
        
        Jamdict has built-in support for KRAD/RADK (i.e. kanji-radical and radical-kanji mapping).
        The terminology of radicals/components used by Jamdict can be different from else where.
        
        - A radical in Jamdict is a principal component, each character has only one radical.
        - A character may be decomposed into several writing components.
        
        By default jamdict provides two maps:
        
        - jam.krad is a Python dict that maps characters to list of components.
        - jam.radk is a Python dict that maps each available components to a list of characters.
        
        ```python
        # Find all writing components (often called "radicals") of the character Èõ≤
        print(jam.krad['Èõ≤'])
        # ['‰∏Ä', 'Èõ®', '‰∫å', 'Âé∂']
        
        # Find all characters with the component Èºé
        chars = jam.radk['Èºé']
        print(chars)
        # {'Èºè', 'Èºí', 'Èºê', 'Èºé', 'Èºë'}
        
        # look up the characters info
        result = jam.lookup(''.join(chars))
        for c in result.chars:
            print(c, c.meanings())
        # Èºè ['cover of tripod cauldron']
        # Èºí ['large tripod cauldron with small']
        # Èºê ['incense tripod']
        # Èºé ['three legged kettle']
        # Èºë []
        ```
        
        ## Finding name entities
        
        ```bash
        # Find all names with Èà¥Êú® inside
        result = jam.lookup('%Èà¥Êú®%')
        for name in result.names:
            print(name)
        
        # [id#5025685] „Ç≠„É•„Éº„ÉÜ„Ç£„Éº„Åô„Åö„Åç („Ç≠„É•„Éº„ÉÜ„Ç£„ÉºÈà¥Êú®) : Kyu-ti- Suzuki (1969.10-) (full name of a particular person)
        # [id#5064867] „Éë„Éë„Ç§„É§„Åô„Åö„Åç („Éë„Éë„Ç§„É§Èà¥Êú®) : Papaiya Suzuki (full name of a particular person)
        # [id#5089076] „É©„Ç∏„Ç´„É´„Åô„Åö„Åç („É©„Ç∏„Ç´„É´Èà¥Êú®) : Rajikaru Suzuki (full name of a particular person)
        # [id#5259356] „Åç„Å§„Å≠„Åñ„Åç„Åô„Åö„Åç„Å≤„Å™„Åü (ÁãêÂ¥éÈà¥Êú®Êó•Âêë) : Kitsunezakisuzukihinata (place name)
        # [id#5379158] „Åì„Åô„Åö„Åç (Â∞èÈà¥Êú®) : Kosuzuki (family or surname)
        # [id#5398812] „Åã„Åø„Åô„Åö„Åç (‰∏äÈà¥Êú®) : Kamisuzuki (family or surname)
        # [id#5465787] „Åã„Çè„Åô„Åö„Åç (Â∑ùÈà¥Êú®) : Kawasuzuki (family or surname)
        # [id#5499409] „Åä„Åä„Åô„Åö„Åç (Â§ßÈà¥Êú®) : Oosuzuki (family or surname)
        # [id#5711308] „Åô„Åô„Åç (Èà¥Êú®) : Susuki (family or surname)
        # ...
        ```
        
        ## Exact matching
        
        Use exact matching for faster search.
        
        Find the word Ëä±ÁÅ´ by idseq (1194580)
        
        ```python
        >>> result = jam.lookup('id#1194580')
        >>> print(result.names[0])
        [id#1194580] „ÅØ„Å™„Å≥ (Ëä±ÁÅ´) : fireworks ((noun (common) (futsuumeishi)))
        ```
        
        Find an exact name Ëä±ÁÅ´ by idseq (5170462)
        
        ```python
        >>> result = jam.lookup('id#5170462')
        >>> print(result.names[0])
        [id#5170462] „ÅØ„Å™„Å≥ (Ëä±ÁÅ´) : Hanabi (female given name or forename)
        ```
        
        See `jamdict_demo.py` and `jamdict/tools.py` for more information.
        
        # Useful links
        
        * JMdict: [http://edrdg.org/jmdict/edict_doc.html](http://edrdg.org/jmdict/edict_doc.html)
        * kanjidic2: [https://www.edrdg.org/wiki/index.php/KANJIDIC_Project](https://www.edrdg.org/wiki/index.php/KANJIDIC_Project)
        * JMnedict: [https://www.edrdg.org/enamdict/enamdict_doc.html](https://www.edrdg.org/enamdict/enamdict_doc.html)
        * KRADFILE: [http://www.edrdg.org/krad/kradinf.html](http://www.edrdg.org/krad/kradinf.html)
        
        # Contributors
        
        - [Le Tuan Anh](https://github.com/letuananh) (Maintainer)
        - [alt-romes](https://github.com/alt-romes)
        - [Matteo Fumagalli](https://github.com/matteofumagalli1275)
        - [Reem Alghamdi](https://github.com/reem-codes)
        - [Techno-coder](https://github.com/Techno-coder) 
        
Keywords: dictionary,japanese,kanji,japanese-language,jmdict,japanese-study,kanjidic2,japanese-dictionary,jamdict
Platform: any
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Development Status :: 3 - Alpha
Classifier: Natural Language :: Japanese
Classifier: Natural Language :: English
Classifier: Environment :: Plugins
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Database
Classifier: Topic :: Text Processing :: Linguistic
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.6
Description-Content-Type: text/markdown
