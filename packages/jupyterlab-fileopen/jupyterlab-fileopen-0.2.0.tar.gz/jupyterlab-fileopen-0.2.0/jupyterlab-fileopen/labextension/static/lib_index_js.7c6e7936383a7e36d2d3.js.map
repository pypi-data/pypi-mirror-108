{"version":3,"sources":["webpack://jupyterlab-fileopen/./lib/handler.js","webpack://jupyterlab-fileopen/./lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCyC;AACG;AACI;AAC2B;AACb;AACP;AACQ;AACxB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACO,0BAA0B,mDAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,8BAA8B,qEAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAc;AACjC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wEAAmB,EAAE,yEAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,yCAAyC,8BAA8B;AACvE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,sCAAsC,0DAAO;AAC7C;AACA;AACA;AACA;AACA,iCAAiC,kEAAe;AAChD,oBAAoB,oDAAU;AAC9B;AACA,8CAA8C,aAAa;AAC3D,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA,0GAA0G,OAAO;AACjH,qBAAqB;AACrB;AACA,aAAa;AACb,kBAAkB,iEAAU;AAC5B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,sCAAsC,0DAAO;AAC7C;AACA;AACA;AACA;AACA,oBAAoB,oDAAU;AAC9B;AACA,8CAA8C,sBAAsB;AACpE,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA,0GAA0G,OAAO;AACjH,qBAAqB;AACrB;AACA,aAAa;AACb,kBAAkB,iEAAU;AAC5B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iEAAe,SAAS,EAAC","file":"lib_index_js.7c6e7936383a7e36d2d3.js","sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jupyterlab-fileopen', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { Widget } from '@lumino/widgets';\nimport { toArray } from '@lumino/algorithm';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { ABCWidgetFactory, DocumentWidget } from '@jupyterlab/docregistry';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { folderIcon } from '@jupyterlab/ui-components';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { requestAPI } from './handler';\nconst selectorItem = '.jp-DirListing-item[data-isdir]';\nconst selectorNotDir = '.jp-DirListing-item[data-isdir=\"false\"]';\nconst SETTINGS_ID = 'jupyterlab-fileopen:jupyterlab-fileopen-settings';\n/**\n * The command IDs.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.openFileExplorer = 'jupyterlab-fileopen:open-file-explorer';\n    CommandIDs.openFile = 'jupyterlab-fileopen:open-file';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A widget that does not will to live.\n */\nexport class DummyWidget extends Widget {\n    onAfterAttach() {\n        var _a;\n        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n}\n/**\n * A widget factory for opening files with the default desktop application.\n */\nexport class FileOpenFactory extends ABCWidgetFactory {\n    /**\n     * Create a new widget factory.\n     */\n    constructor(options, app) {\n        super(options);\n        this.app = app;\n    }\n    /**\n     * Create a new widget given a context.\n     */\n    createNewWidget(context) {\n        this.app.commands.execute(CommandIDs.openFile);\n        return new DocumentWidget({\n            context,\n            content: new DummyWidget()\n        });\n    }\n}\n/**\n * Initialization data for the jupyterlab-fileopen extension.\n */\nconst extension = {\n    id: 'jupyterlab-fileopen:plugin',\n    requires: [IFileBrowserFactory, ISettingRegistry],\n    autoStart: true,\n    activate: (app, factory, settings) => {\n        Promise.all([app.restored, settings.load(SETTINGS_ID)]).then(([, setting]) => {\n            const widgetFactory = new FileOpenFactory({\n                // TODO Translation\n                name: 'FileOpen',\n                modelName: 'base64',\n                fileTypes: ['desktop'],\n                defaultFor: ['desktop'],\n                preferKernel: false,\n                canStartKernel: false\n            }, app);\n            const extensions = setting.get('extensions').composite;\n            app.docRegistry.addWidgetFactory(widgetFactory);\n            app.docRegistry.addFileType({ name: 'desktop', extensions });\n            app.docRegistry.setDefaultWidgetFactory('desktop', 'FileOpen');\n        });\n        app.commands.addCommand(CommandIDs.openFileExplorer, {\n            execute: () => {\n                const widget = factory.tracker.currentWidget;\n                if (widget) {\n                    const selection = toArray(widget.selectedItems());\n                    if (selection.length !== 1) {\n                        return;\n                    }\n                    const selected = selection[0];\n                    const path = PathExt.dirname(selected.path);\n                    requestAPI('open-file-explorer', {\n                        method: 'POST',\n                        body: JSON.stringify({ path: path })\n                    })\n                        .then(data => {\n                        // Was a success\n                    })\n                        .catch(reason => {\n                        console.error(`The jupyterlab-fileopen server extension appears to be missing.\\n${reason}`);\n                    });\n                }\n            },\n            icon: folderIcon,\n            // TODO Translation\n            // label: trans.__('Reveal In File Explorer')\n            label: 'Reveal In File Explorer'\n        });\n        app.commands.addCommand(CommandIDs.openFile, {\n            execute: () => {\n                const widget = factory.tracker.currentWidget;\n                if (widget) {\n                    const selection = toArray(widget.selectedItems());\n                    if (selection.length !== 1) {\n                        return;\n                    }\n                    const selected = selection[0];\n                    requestAPI('open-file', {\n                        method: 'POST',\n                        body: JSON.stringify({ path: selected.path })\n                    })\n                        .then(data => {\n                        // Was a success\n                    })\n                        .catch(reason => {\n                        console.error(`The jupyterlab-fileopen server extension appears to be missing.\\n${reason}`);\n                    });\n                }\n            },\n            icon: folderIcon,\n            // TODO Translation\n            // label: trans.__('Open With Desktop Application')\n            label: 'Open With Desktop Application'\n        });\n        app.contextMenu.addItem({\n            command: CommandIDs.openFileExplorer,\n            selector: selectorItem,\n            rank: 2\n        });\n        app.contextMenu.addItem({\n            command: CommandIDs.openFile,\n            selector: selectorNotDir,\n            rank: 2\n        });\n    }\n};\nexport default extension;\n"],"sourceRoot":""}