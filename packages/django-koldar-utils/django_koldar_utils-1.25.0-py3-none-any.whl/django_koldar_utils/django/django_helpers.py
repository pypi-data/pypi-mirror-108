import enum
from typing import Iterable

import stringcase
from django.contrib.auth.models import Permission
from django.contrib.contenttypes.models import ContentType


class PermissionClass(enum.Enum):
    """
    An enumeration that list all the possible actions a permission can use
    """
    CREATE = "add"
    READ = "view"
    UPDATE = "change"
    DELETE = "delete"


def get_app_label_of_model(model_type: type) -> str:
    """
    get the app owning the given model

    :param model_type: type of the model whose app we need to obtain
    :see: https://stackoverflow.com/a/47436214/1887602
    """
    obj_content_type = ContentType.objects.get_for_model(model_type, for_concrete_model=False)
    return obj_content_type.app_label


def get_permission_codename(action: PermissionClass, model: type) -> str:
    """
    Fetch the code name of a permission

    :param action: the action a standard permission should allow
    :param model: model involved
    :return: permission code name that can be used in permission_required
    """
    return f"{action.value}_{stringcase.lowercase(model.__name__)}"


def get_permission_create_name(model: type) -> str:
    """
    Fetch the code name of a create permission

    :param model: model involved
    :return: permission code name that can be used in permission_required
    """
    return get_permission_codename(PermissionClass.CREATE, model)


def get_permission_read_name(model: type) -> str:
    """
    Fetch the code name of a read permission

    :param model: model involved
    :return: permission code name that can be used in permission_required
    """
    return get_permission_codename(PermissionClass.READ, model)


def get_permission_update_name(model: type) -> str:
    """
    Fetch the code name of an update permission

    :param model: model involved
    :return: permission code name that can be used in permission_required
    """
    return get_permission_codename(PermissionClass.UPDATE, model)


def get_permission_delete_name(model: type) -> str:
    """
    Fetch the code name of a delete permission

    :param model: model involved
    :return: permission code name that can be used in permission_required
    """
    return get_permission_codename(PermissionClass.DELETE, model)


def create_permission_to_save(name: str, codename: str, model: type) -> Permission:
    """
    Generate  anew instance of Permission. This is very handy if you wnat to programmatically create permissions.
    Just save the instance generated by this method.

    :param name: name of hte permission
    :param codename: codename of the permission
    :param model: model that owns the permission
    :return: a new instance of permission
    """
    content_type = ContentType.objects.get_for_model(model)
    permission = Permission(
        codename=codename,
        name=name,
        content_type=content_type,
    )
    return permission


def get_name_of_primary_key(model_type: type) -> str:
    """
    Fetch the name of the primary key of a model. This will most likely yields "id"

    :param model_type: type of the model we want to analyze
    :return: name of its primary key
    """
    return model_type._meta.pk.name


def get_unique_fields(model_type: type) -> Iterable[str]:
    """
    Fetch a list of all the fields in the model that are marked as unique

    :param model_type: type to analyze
    :return: iterable fo unique fields
    """
    for x in model_type._meta.get_fields():
        if hasattr(x, "unique") and x.unique is True:
            yield x

