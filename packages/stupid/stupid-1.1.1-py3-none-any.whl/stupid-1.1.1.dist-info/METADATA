Metadata-Version: 2.1
Name: stupid
Version: 1.1.1
Summary: A stupid workaround when using multiple inheritance and __slots__
Home-page: https://github.com/masell/stupid
License: BSD-2-Clause
Author: masell
Requires-Python: >=3.7,<4.0
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Project-URL: Repository, https://github.com/masell/stupid
Description-Content-Type: text/markdown

# stupid

A stupid workaround when using multiple inheritance and `__slots__`

# installation

`pip install stupid`

# example

```
from hashlib import sha512
from stupid import StupidData

class User(StupidData):
    name: str
                       
class AccessData(StupidData):
    access_code: sha512

class ApiPayload(User, AccessData):
    pass

payload = ApiPayload("root", sha512()) 
payload = ApiPayload(name="root", access_code=sha512())
```

`__slots__` are autogenerated and works with multiple inheritance as shown above.
As `__slots__` are present assigning new attributes is not allowed.

```
>>> payload = ApiPayload(name="root", access_code=sha512())
>>> payload.extra = 1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'ApiPayload' object has no attribute 'extra'
```

It's also a dataclass.

```
>>> from dataclasses import is_dataclass
>>> is_dataclass(ApiPayload)
True
```

isinstance check also works.
```
>>> isinstance(payload, User)
True
>>> isinstance(payload, AccessData)
True
```


issubclass
```
>>> from stupid import StupidData
>>> class A(StupidData): pass
>>> class B(A): pass
>>> class C:pass
>>>
>>> issubclass(B, A)
True
>>> issubclass(B, C)
False
```

