Metadata-Version: 2.1
Name: PyPSocket
Version: 1.0.0.4
Summary: 소켓을 쉽고 간단하게 사용할 수 있는 모듈
Home-page: https://github.com/Duelit
Author: Duelit
Author-email: jaeyung180@gmail.com
License: UNKNOWN
Platform: UNKNOWN
Classifier: License :: OSI Approved :: MIT License
Requires-Python: >=3
Description-Content-Type: text/markdown
License-File: LICENSE

# PyPSocket
**Version 1.0.0.3**

`PyPSocket`은 간편하게 소켓을 사용하기 위해 만들어진 모듈입니다. 
파일과 같은 큰 데이터를 제약 없이 송신 및 수신할 수 있도록 
설계되었습니다.


## Install
```shell
pip install PyPSocket
```


## Example
- ### Server
  ```python
  import PyPSocket
  
  
  def on_message(cid, message):
      print(f"[{cid}]: {message}")
  
  
  address = PyPSocket.AddressInfo("0.0.0.0", 8000)
  option = PyPSocket.Option(PyPSocket.TCPHandler)
  server = PyPSocket.Server(address, option)
  server.event.on_message += on_message
  server.run()
  
  
  while True:
      server.broadcast(data="Hello, World!")
  ```
  

- ### Client
  ```python
  import PyPSocket
  
  
  def on_message(cid, message):
      print(f"[{cid}]: {message}")
  
  
  address = PyPSocket.AddressInfo("0.0.0.0", 8000)
  option = PyPSocket.Option(PyPSocket.TCPHandler)
  client = PyPSocket.Client(address, option)
  client.event.on_message += on_message
  client.run()
  
  
  while True:
      client.send(data="Hello, World!")
  ```


## Documentation
- ### Server
  연결된 `Client`를 관리합니다.
  ```python
  server = Server(address_info, option)
  ```
  - ### `Server.run()`
    `Server`를 실행합니다.
    ```python
    server.run()
    ```
  - ### `Server.close()`
    `Server`를 종료합니다.
    ```python
    server.close()
    ```
  - ### `Server.disconnect(cid)`
    `cid`가 부여된 `Client`의 연결을 종료합니다.
    ```python
    server.disconnect("cid_string")
    ```
  - ### `Server.send(cid, **kwargs)`
    `cid`가 부여된 `Client`에게 `kwargs`를 전송합니다.
    ```python
    server.send("cid_string", data="Hello, World!")
    ```
  - ### `Server.broadcast(**kwargs)`
    연결된 모든 `Client`에게 `kwargs`를 전송합니다.
    ```python
    server.broadcast(data="Hello, World!")
    ```
  

- ### AddressInfo
  `address`와 `port`의 값이 유효한지 확인하고 저장합니다.  
  유효하지 않을 경우 `OutOfRangeAddressInfoException` 예외를 발생시킵니다.
  ```python
  address_info = AddressInfo(address, port)
  ```


- ### Option
  `Server` 또는 `Client`의 옵션입니다.
  ```python
  option = Option(handler_type, *args, **kwargs)
  ```


- ### Event
  객체에서 이벤트가 발생했을 때 호출이 예약된 메소드를 저장하고 호출합니다.  
  보통 커스텀 이벤트 핸들러를 정의할 때 사용합니다.
  ```python
  event = Event(function)
  ```
  이벤트에 메소드를 추가하는 법
  ```python
  def on_event(*args, **kwargs):
      print(args, kwargs)
  event += on_event
  ```


- ### ObjectDisposedException
  종료된 객체에 접근할 때 발생하는 예외입니다.
  ```python
  raise ObjectDisposedException(object)
  ```

  - ### HandleClosedException
    종료된 핸들에 접근할 때 발생하는 예외입니다.  
    `ObjectDisposedException`의 하위 클래스 입니다.
    ```python
    raise HandleClosedException(handle)
    ```
    
  - ### HandleClosedException
    종료된 핸들러에 접근할 때 발생하는 예외입니다.  
    `ObjectDisposedException`의 하위 클래스 입니다.
    ```python
    raise HandlerClosedException(handler)
    ```
    


## Contributors
**Kim Jae-yun**



## Copyright & License
**Copyright 2021. Kim Jae-yun**  
**MIT License**









