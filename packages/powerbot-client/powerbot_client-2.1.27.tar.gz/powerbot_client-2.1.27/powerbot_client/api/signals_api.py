# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The Powerbot system provides B2B services for trading at intraday power markets. By using the Powerbot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that he/she is familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/extras/download-center/documentation) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of OTR (order-to-trade) limits and other limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION Powerbot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool or TGE. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## DOCUMENTATION  In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoints The Powerbot service is available at the following REST endpoints:  | Instance                | Base URL for REST Endpoints                                           | |-------------------------|-----------------------------------------------------------------------| | Test (EPEX)             | https://staging.powerbot-trading.com/playground/epex/v2/api           | | Test (Nord Pool)        | https://staging.powerbot-trading.com/playground/nordpool/v2/api       | | Test (HUPX)             | https://staging.powerbot-trading.com/playground/hupx/v2/api           | | Test (BSP Southpool)    | https://staging.powerbot-trading.com/playground/southpool/v2/api      | | Test (TGE)              | https://staging.powerbot-trading.com/playground/tge/v2/api            | | Test (IBEX)             | https://staging.powerbot-trading.com/playground/ibex/v2/api           | | Test (CROPEX)           | https://staging.powerbot-trading.com/playground/cropex/v2/api         | | Staging, Production     | Provided on request                                                   |  Access to endpoints is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) The API provides automated generation of API clients (programming libraries) for a wide range of programming languages. To generate them, please open Swagger Editor from the exchange menu, click on \"Generate Client\" and choose a programming language.  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). This allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.  ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at https://github.com/powerbot-trading.  # noqa: E501

    OpenAPI spec version: 2.1.27
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from powerbot_client.api_client import ApiClient


class SignalsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_signals(self, source, delivery_start, delivery_end, **kwargs):  # noqa: E501
        """Deletes signals  # noqa: E501

        Allows you to delete signals. By setting the optional delivery_areas and/or portfolio_ids parameters, you can delete signals for selected cases only. Without specifying these parameters, the signal is removed completely.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_signals(source, delivery_start, delivery_end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: (required)
        :param datetime delivery_start: (required)
        :param datetime delivery_end: (required)
        :param list[str] delivery_areas:
        :param list[str] portfolio_id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_signals_with_http_info(source, delivery_start, delivery_end, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_signals_with_http_info(source, delivery_start, delivery_end, **kwargs)  # noqa: E501
            return data

    def delete_signals_with_http_info(self, source, delivery_start, delivery_end, **kwargs):  # noqa: E501
        """Deletes signals  # noqa: E501

        Allows you to delete signals. By setting the optional delivery_areas and/or portfolio_ids parameters, you can delete signals for selected cases only. Without specifying these parameters, the signal is removed completely.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_signals_with_http_info(source, delivery_start, delivery_end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: (required)
        :param datetime delivery_start: (required)
        :param datetime delivery_end: (required)
        :param list[str] delivery_areas:
        :param list[str] portfolio_id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source', 'delivery_start', 'delivery_end', 'delivery_areas', 'portfolio_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_signals" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source' is set
        if ('source' not in params or
                params['source'] is None):
            raise ValueError("Missing the required parameter `source` when calling `delete_signals`")  # noqa: E501
        # verify the required parameter 'delivery_start' is set
        if ('delivery_start' not in params or
                params['delivery_start'] is None):
            raise ValueError("Missing the required parameter `delivery_start` when calling `delete_signals`")  # noqa: E501
        # verify the required parameter 'delivery_end' is set
        if ('delivery_end' not in params or
                params['delivery_end'] is None):
            raise ValueError("Missing the required parameter `delivery_end` when calling `delete_signals`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source' in params:
            path_params['source'] = params['source']  # noqa: E501
        if 'delivery_start' in params:
            path_params['delivery_start'] = params['delivery_start']  # noqa: E501
        if 'delivery_end' in params:
            path_params['delivery_end'] = params['delivery_end']  # noqa: E501

        query_params = []
        if 'delivery_areas' in params:
            query_params.append(('delivery_areas', params['delivery_areas']))  # noqa: E501
            collection_formats['delivery_areas'] = 'csv'  # noqa: E501
        if 'portfolio_id' in params:
            query_params.append(('portfolio_id', params['portfolio_id']))  # noqa: E501
            collection_formats['portfolio_id'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/signals/{source}/{delivery_start}/{delivery_end}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_signals(self, **kwargs):  # noqa: E501
        """List of received signals  # noqa: E501

        Allows you to retrieve signals you have previously sent to the system. This method is mainly used for debbuging purposes, as signals are usually delivered to algorithms and dashboards as a part of the orderbook request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_signals(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] portfolio_id:
        :param int offset: Offset when loading a list of items
        :param int limit: Limits the number of loaded items
        :param datetime received_from: from timestamp is 'inclusive' (i.e. >=), use UTC timezone
        :param datetime received_to: to timestamp is 'exclusive' (i.e. <), use UTC timezone
        :param str delivery_area: filter by delivery area
        :param datetime delivery_start: filter by delivery_start, use UTC timezone
        :param datetime delivery_end: filter by delivery_end, use UTC timezone
        :return: list[Signal]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_signals_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_signals_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_signals_with_http_info(self, **kwargs):  # noqa: E501
        """List of received signals  # noqa: E501

        Allows you to retrieve signals you have previously sent to the system. This method is mainly used for debbuging purposes, as signals are usually delivered to algorithms and dashboards as a part of the orderbook request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_signals_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] portfolio_id:
        :param int offset: Offset when loading a list of items
        :param int limit: Limits the number of loaded items
        :param datetime received_from: from timestamp is 'inclusive' (i.e. >=), use UTC timezone
        :param datetime received_to: to timestamp is 'exclusive' (i.e. <), use UTC timezone
        :param str delivery_area: filter by delivery area
        :param datetime delivery_start: filter by delivery_start, use UTC timezone
        :param datetime delivery_end: filter by delivery_end, use UTC timezone
        :return: list[Signal]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portfolio_id', 'offset', 'limit', 'received_from', 'received_to', 'delivery_area', 'delivery_start', 'delivery_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_signals" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'portfolio_id' in params:
            query_params.append(('portfolio_id', params['portfolio_id']))  # noqa: E501
            collection_formats['portfolio_id'] = 'csv'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'received_from' in params:
            query_params.append(('received_from', params['received_from']))  # noqa: E501
        if 'received_to' in params:
            query_params.append(('received_to', params['received_to']))  # noqa: E501
        if 'delivery_area' in params:
            query_params.append(('delivery_area', params['delivery_area']))  # noqa: E501
        if 'delivery_start' in params:
            query_params.append(('delivery_start', params['delivery_start']))  # noqa: E501
        if 'delivery_end' in params:
            query_params.append(('delivery_end', params['delivery_end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/signals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Signal]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_signals(self, body, **kwargs):  # noqa: E501
        """Submitting of trading signals and positions  # noqa: E501

        Allows you to send trading signals to the system, e.g. positions, fundamental data, weather data or outputs of an optimization software. This data is then aligned to contracts at the market and delivered with the orderbook. This way, trading signals are automatically archived for ex-post analysis and algorithms do not need to import data themselves. In addition, signals are displayed in the dashboard.  This methods can receive a collection of signals at once, usually each signal is valid for a given timestamp (e.g. a quarterhour or hour), has a freely defined source (e.g. ETRM_system) and is valid for an array of delivery areas and portfolios.  A signal can contain a position_long and position_short (needs to be equal or greater than zero) or a freely defined JSON object with the name \"value\" and key/value pairs, but not both at once. Please be aware that the signal-key for each contract is unique and data is overwritten, if sent from multiple sources.  Note that it is not possible to post signals for a defined contract. All contracts which have the specified \"delivery_start\" and \"delivery_end\" field will receive the signal (e.g. XBID and local contracts will receive the signal).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_signals(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[BulkSignal] body: Signals payload (required)
        :return: list[BulkSignalResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_signals_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_signals_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_signals_with_http_info(self, body, **kwargs):  # noqa: E501
        """Submitting of trading signals and positions  # noqa: E501

        Allows you to send trading signals to the system, e.g. positions, fundamental data, weather data or outputs of an optimization software. This data is then aligned to contracts at the market and delivered with the orderbook. This way, trading signals are automatically archived for ex-post analysis and algorithms do not need to import data themselves. In addition, signals are displayed in the dashboard.  This methods can receive a collection of signals at once, usually each signal is valid for a given timestamp (e.g. a quarterhour or hour), has a freely defined source (e.g. ETRM_system) and is valid for an array of delivery areas and portfolios.  A signal can contain a position_long and position_short (needs to be equal or greater than zero) or a freely defined JSON object with the name \"value\" and key/value pairs, but not both at once. Please be aware that the signal-key for each contract is unique and data is overwritten, if sent from multiple sources.  Note that it is not possible to post signals for a defined contract. All contracts which have the specified \"delivery_start\" and \"delivery_end\" field will receive the signal (e.g. XBID and local contracts will receive the signal).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_signals_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[BulkSignal] body: Signals payload (required)
        :return: list[BulkSignalResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_signals" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_signals`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/signals', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BulkSignalResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
