{"version":3,"sources":["webpack://jupyterlab-ext-rightbar-doc/./lib/api.js","webpack://jupyterlab-ext-rightbar-doc/./lib/doc.js","webpack://jupyterlab-ext-rightbar-doc/./lib/index.js","webpack://jupyterlab-ext-rightbar-doc/./style/base.css","webpack://jupyterlab-ext-rightbar-doc/./style/index.css","webpack://jupyterlab-ext-rightbar-doc/./style/index.css?b7f0"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AAC+B;AACO;AACG;AACzC;AACA;AACA;AACO,gCAAgC,mDAAM;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gDAAmB,SAAS,iCAAiC,EAAE,gDAAmB,yBAAyB,gDAAmB,YAAY;AACrK;AACA;AACA,aAAa,YAAY;AACzB,QAAQ,6CAAe,gCAAgC,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACqE;AACX;AACG;AACnB;AACP;AACP;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,gDAAU;AACpC;AACA,SAAS;AACT;AACA;AACA,0BAA0B,mDAAiB;AAC3C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oEAAgB;AACxB,QAAQ,8DAAS;AACjB,QAAQ,oEAAe;AACvB,QAAQ,uEAAmB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;;;;ACjEzB;AACsH;AAC7B;AACzF,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F;AACA,iDAAiD,kEAAkE;AACnH;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;;;ACPvC;AACsH;AAC7B;AACW;AACpG,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F,0BAA0B,kFAAiC;AAC3D;AACA,qDAAqD,kEAAkE;AACvH;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;ACTkD;AACzF,YAAuF;;AAEvF;;AAEA;AACA;;AAEA,aAAa,0GAAG,CAAC,mFAAO;;;;AAIxB,iEAAe,0FAAc,MAAM,E","file":"lib_index_js.dcdd57d08cc46b91e9d5.js","sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\r\nimport { ServerConnection } from '@jupyterlab/services';\r\n/**\r\n * Call the API extension\r\n *\r\n * @param endPoint API REST end point for the extension\r\n * @param init Initial values for the request\r\n * @returns The response body interpreted as JSON\r\n */\r\nexport async function requestAPI(endPoint = '', init = {}) {\r\n    // Make request to Jupyter API\r\n    const settings = ServerConnection.makeSettings();\r\n    const requestUrl = URLExt.join(settings.baseUrl, 'codelab/api', // API Namespace\r\n    endPoint);\r\n    let response;\r\n    try {\r\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\r\n    }\r\n    catch (error) {\r\n        throw new ServerConnection.NetworkError(error);\r\n    }\r\n    let data = await response.text();\r\n    if (data.length > 0) {\r\n        try {\r\n            data = JSON.parse(data);\r\n        }\r\n        catch (error) {\r\n            console.log('Not a JSON response body.', response);\r\n        }\r\n    }\r\n    if (!response.ok) {\r\n        throw new ServerConnection.ResponseError(response, data.message || data);\r\n    }\r\n    return data;\r\n}\r\n","// Copyright (c) 福建星网视易信息系统有限公司\r\n// Distributed under the terms of the Modified BSD License.\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Widget } from '@lumino/widgets';\r\n/**\r\n * Widget for hosting a notebook document of contents.\r\n */\r\nexport class DocumentOfContent extends Widget {\r\n    /**\r\n     * Returns a new table of contents.\r\n     *\r\n     * @param options - options\r\n     * @returns widget\r\n     */\r\n    constructor(options) {\r\n        super();\r\n        this._url = options.url;\r\n    }\r\n    /**\r\n     * Callback invoked upon an update request.\r\n     *\r\n     * @param msg - message\r\n     */\r\n    onUpdateRequest(msg) {\r\n        this.updateDOC();\r\n    }\r\n    updateDOC() {\r\n        let title = '操作手册';\r\n        let url = this._url;\r\n        let renderedJSX = (React.createElement(\"div\", { className: \"jp-BookOfContents\" }, React.createElement(\"header\", null, title), React.createElement(\"iframe\", { style: {\r\n                width: '100%',\r\n                height: '100%'\r\n            }, src: url })));\r\n        ReactDOM.render(renderedJSX, this.node, () => { });\r\n    }\r\n    /**\r\n     * Callback invoked to re-render after showing a table of contents.\r\n     *\r\n     * @param msg - message\r\n     */\r\n    onAfterShow(msg) {\r\n        this.update();\r\n    }\r\n}\r\n","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\nimport { ILabShell, ILayoutRestorer } from '@jupyterlab/application';\r\nimport { IDocumentManager } from '@jupyterlab/docmanager';\r\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\r\nimport { DocumentOfContent } from './doc';\r\nimport { requestAPI } from './api';\r\nimport '../style/index.css';\r\n/**\r\n * Activates the ToC extension.\r\n *\r\n * @private\r\n * @param app - Jupyter application\r\n * @param docmanager - document manager\r\n * @param editorTracker - editor tracker\r\n * @param labShell - Jupyter lab shell\r\n * @param restorer - application layout restorer\r\n * @param markdownViewerTracker - Markdown viewer tracker\r\n * @param notebookTracker - notebook tracker\r\n * @param rendermime - rendered MIME registry\r\n * @returns table of contents registry\r\n */\r\nfunction activateDOC(app, docmanager, labShell, restorer, rendermime) {\r\n    const getCodelabURL = async function () {\r\n        const res = await requestAPI('getCodeLabDocument', {\r\n            method: 'GET'\r\n        });\r\n        if (res.status == 200) {\r\n            var url = res.data;\r\n            var tab = new DocumentOfContent({\r\n                docmanager,\r\n                rendermime,\r\n                url\r\n            });\r\n            tab.title.iconClass = 'jp-BookOfContents-icon jp-SideBar-tabIcon';\r\n            tab.title.caption = '操作手册';\r\n            tab.id = 'table-of-contents';\r\n            labShell.add(tab, 'right', {\r\n                activate: true,\r\n                rank: 0\r\n            });\r\n            restorer.add(tab, 'codeLab-handbook');\r\n        }\r\n    };\r\n    getCodelabURL();\r\n}\r\n/**\r\n * Initialization data for the ToC extension.\r\n *\r\n * @private\r\n */\r\nconst extension = {\r\n    id: '@blackwalnutlab/gitbook',\r\n    autoStart: true,\r\n    requires: [\r\n        IDocumentManager,\r\n        ILabShell,\r\n        ILayoutRestorer,\r\n        IRenderMimeRegistry,\r\n    ],\r\n    activate: activateDOC\r\n};\r\n/**\r\n * Exports.\r\n */\r\nexport default extension;\r\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../node_modules/css-loader/dist/cjs.js!./base.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\r\\n\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../node_modules/css-loader/dist/cjs.js!./index.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};"],"sourceRoot":""}