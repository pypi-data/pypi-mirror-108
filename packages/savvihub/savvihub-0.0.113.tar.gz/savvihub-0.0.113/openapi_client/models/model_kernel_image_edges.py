# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ModelKernelImageEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'organization': 'ModelOrganization',
        'organization_credentials': 'ModelOrganizationCredentials',
        'workspace': 'ModelWorkspace',
        'workspace_credentials': 'ModelWorkspaceCredentials'
    }

    attribute_map = {
        'organization': 'organization',
        'organization_credentials': 'organization_credentials',
        'workspace': 'workspace',
        'workspace_credentials': 'workspace_credentials'
    }

    def __init__(self, organization=None, organization_credentials=None, workspace=None, workspace_credentials=None, local_vars_configuration=None):  # noqa: E501
        """ModelKernelImageEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._organization = None
        self._organization_credentials = None
        self._workspace = None
        self._workspace_credentials = None
        self.discriminator = None

        if organization is not None:
            self.organization = organization
        if organization_credentials is not None:
            self.organization_credentials = organization_credentials
        if workspace is not None:
            self.workspace = workspace
        if workspace_credentials is not None:
            self.workspace_credentials = workspace_credentials

    @property
    def organization(self):
        """Gets the organization of this ModelKernelImageEdges.  # noqa: E501


        :return: The organization of this ModelKernelImageEdges.  # noqa: E501
        :rtype: ModelOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ModelKernelImageEdges.


        :param organization: The organization of this ModelKernelImageEdges.  # noqa: E501
        :type organization: ModelOrganization
        """

        self._organization = organization

    @property
    def organization_credentials(self):
        """Gets the organization_credentials of this ModelKernelImageEdges.  # noqa: E501


        :return: The organization_credentials of this ModelKernelImageEdges.  # noqa: E501
        :rtype: ModelOrganizationCredentials
        """
        return self._organization_credentials

    @organization_credentials.setter
    def organization_credentials(self, organization_credentials):
        """Sets the organization_credentials of this ModelKernelImageEdges.


        :param organization_credentials: The organization_credentials of this ModelKernelImageEdges.  # noqa: E501
        :type organization_credentials: ModelOrganizationCredentials
        """

        self._organization_credentials = organization_credentials

    @property
    def workspace(self):
        """Gets the workspace of this ModelKernelImageEdges.  # noqa: E501


        :return: The workspace of this ModelKernelImageEdges.  # noqa: E501
        :rtype: ModelWorkspace
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this ModelKernelImageEdges.


        :param workspace: The workspace of this ModelKernelImageEdges.  # noqa: E501
        :type workspace: ModelWorkspace
        """

        self._workspace = workspace

    @property
    def workspace_credentials(self):
        """Gets the workspace_credentials of this ModelKernelImageEdges.  # noqa: E501


        :return: The workspace_credentials of this ModelKernelImageEdges.  # noqa: E501
        :rtype: ModelWorkspaceCredentials
        """
        return self._workspace_credentials

    @workspace_credentials.setter
    def workspace_credentials(self, workspace_credentials):
        """Sets the workspace_credentials of this ModelKernelImageEdges.


        :param workspace_credentials: The workspace_credentials of this ModelKernelImageEdges.  # noqa: E501
        :type workspace_credentials: ModelWorkspaceCredentials
        """

        self._workspace_credentials = workspace_credentials

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelKernelImageEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelKernelImageEdges):
            return True

        return self.to_dict() != other.to_dict()
