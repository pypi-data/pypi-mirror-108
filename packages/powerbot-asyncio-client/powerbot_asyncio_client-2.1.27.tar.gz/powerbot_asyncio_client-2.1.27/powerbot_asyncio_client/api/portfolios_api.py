# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The Powerbot system provides B2B services for trading at intraday power markets. By using the Powerbot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that he/she is familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/extras/download-center/documentation) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of OTR (order-to-trade) limits and other limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION Powerbot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool or TGE. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## DOCUMENTATION  In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoints The Powerbot service is available at the following REST endpoints:  | Instance                | Base URL for REST Endpoints                                           | |-------------------------|-----------------------------------------------------------------------| | Test (EPEX)             | https://staging.powerbot-trading.com/playground/epex/v2/api           | | Test (Nord Pool)        | https://staging.powerbot-trading.com/playground/nordpool/v2/api       | | Test (HUPX)             | https://staging.powerbot-trading.com/playground/hupx/v2/api           | | Test (BSP Southpool)    | https://staging.powerbot-trading.com/playground/southpool/v2/api      | | Test (TGE)              | https://staging.powerbot-trading.com/playground/tge/v2/api            | | Test (IBEX)             | https://staging.powerbot-trading.com/playground/ibex/v2/api           | | Test (CROPEX)           | https://staging.powerbot-trading.com/playground/cropex/v2/api         | | Staging, Production     | Provided on request                                                   |  Access to endpoints is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) The API provides automated generation of API clients (programming libraries) for a wide range of programming languages. To generate them, please open Swagger Editor from the exchange menu, click on \"Generate Client\" and choose a programming language.  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). This allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.  ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at https://github.com/powerbot-trading.  # noqa: E501

    OpenAPI spec version: 2.1.27
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from powerbot_asyncio_client.api_client import ApiClient


class PortfoliosApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_portfolio(self, body, **kwargs):  # noqa: E501
        """Create a new portfolio  # noqa: E501

        Create a new portfolio for a tenant (company). A portfolio can have access to several combinations of exchange and delivery area, but only to those the tenant has access to.  The creation and modification of a portfolio is only possible when using the master-API-key or the tenant-master-API-key of the tenant which the portfolio belongs to.  To give a portfolio access to delivery areas, please configure a list of combinations of exchange and delivery-area within the risk management element. Be aware that the portfolio can only use delivery areas configured within the tenant. A list of all delivery areas is found in the documentation.  In addition, position limits can be set for combination of exchange and delivery area and allow you to control the net position of the portfolio in MW (min_net_pos_limit and max_net_pos_limit, e.g. -20 MW and +50 MW) and the absolute trading volume in MW (abspos_limit, e.g. 100 MW).  Cash limits are configured per currency and allow you to control the daily net cash position of the portfolio (e.g. - 50.000 EUR to +100.000 EUR) on a trading day.  OTR limits allow you to control the maximum order-to-trade ratio (number of orders divided by trades) of a portfolio per combination of exchange and delivery area.  The element \"trading period\" is only used in special configurations and can only be set on portfolio level on historical servers, so it should be left empty for normal users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_portfolio(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewPortfolio body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_portfolio_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_portfolio_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_portfolio_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new portfolio  # noqa: E501

        Create a new portfolio for a tenant (company). A portfolio can have access to several combinations of exchange and delivery area, but only to those the tenant has access to.  The creation and modification of a portfolio is only possible when using the master-API-key or the tenant-master-API-key of the tenant which the portfolio belongs to.  To give a portfolio access to delivery areas, please configure a list of combinations of exchange and delivery-area within the risk management element. Be aware that the portfolio can only use delivery areas configured within the tenant. A list of all delivery areas is found in the documentation.  In addition, position limits can be set for combination of exchange and delivery area and allow you to control the net position of the portfolio in MW (min_net_pos_limit and max_net_pos_limit, e.g. -20 MW and +50 MW) and the absolute trading volume in MW (abspos_limit, e.g. 100 MW).  Cash limits are configured per currency and allow you to control the daily net cash position of the portfolio (e.g. - 50.000 EUR to +100.000 EUR) on a trading day.  OTR limits allow you to control the maximum order-to-trade ratio (number of orders divided by trades) of a portfolio per combination of exchange and delivery area.  The element \"trading period\" is only used in special configurations and can only be set on portfolio level on historical servers, so it should be left empty for normal users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_portfolio_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewPortfolio body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_portfolio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_portfolio`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/portfolios', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_portfolio(self, id, **kwargs):  # noqa: E501
        """Delete a portfolio  # noqa: E501

        Delete a portfolio from the system. **Heads up** - A portfolio can only be deleted if it does not contain orders or trades.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_portfolio(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the portfolio (not equal to the portfolio's name) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_portfolio_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_portfolio_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_portfolio_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a portfolio  # noqa: E501

        Delete a portfolio from the system. **Heads up** - A portfolio can only be deleted if it does not contain orders or trades.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_portfolio_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the portfolio (not equal to the portfolio's name) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_portfolio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_portfolio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/portfolio/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portfolio_risk_management_settings(self, id, **kwargs):  # noqa: E501
        """Get the portfolio's risk management settings  # noqa: E501

        Retrieves the risk management settings for a specific portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portfolio_risk_management_settings(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the portfolio (not equal to portfolio's name) (required)
        :return: RiskManagementSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portfolio_risk_management_settings_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portfolio_risk_management_settings_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_portfolio_risk_management_settings_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the portfolio's risk management settings  # noqa: E501

        Retrieves the risk management settings for a specific portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portfolio_risk_management_settings_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the portfolio (not equal to portfolio's name) (required)
        :return: RiskManagementSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portfolio_risk_management_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_portfolio_risk_management_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/portfolio/{id}/risk-management', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RiskManagementSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portfolios(self, **kwargs):  # noqa: E501
        """List all portfolios  # noqa: E501

        Retrieve a list of all portfolios your API key has access to. When performing this request using a master-API-key, a full list of portfolios of all tenants is listed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portfolios(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Portfolio]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portfolios_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_portfolios_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_portfolios_with_http_info(self, **kwargs):  # noqa: E501
        """List all portfolios  # noqa: E501

        Retrieve a list of all portfolios your API key has access to. When performing this request using a master-API-key, a full list of portfolios of all tenants is listed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portfolios_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Portfolio]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portfolios" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/portfolios', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Portfolio]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_portfolio(self, body, id, **kwargs):  # noqa: E501
        """Update (rename) a portfolio  # noqa: E501

        Update the base data (name) of a portfolio  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portfolio(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdatedPortfolio body: (required)
        :param str id: id of the portfolio (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_portfolio_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_portfolio_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_portfolio_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update (rename) a portfolio  # noqa: E501

        Update the base data (name) of a portfolio  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portfolio_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdatedPortfolio body: (required)
        :param str id: id of the portfolio (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_portfolio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_portfolio`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_portfolio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/portfolio/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_portfolio_risk_management_settings(self, body, id, **kwargs):  # noqa: E501
        """Update the portfolio's risk management settings  # noqa: E501

        Change the risk management settings for a specific portfolio. You need to use the master-API-key or tenant-master-API-key to perform this operation.  To give a portfolio access to delivery areas, configure a list of combinations of exchange and delivery-area within the risk management element. Be aware that the portfolio can only use delivery areas configured within the tenant.  In addition, position limits can be set for combination of exchange and delivery area and allow you to control the net position of the portfolio in MW (min_net_pos_limit and max_net_pos_limit, e.g. -20 MW and +50 MW) and the absolute trading volume in MW (abspos_limit, e.g. 100 MW).  Cash limits are configured per currency and allow you to control the daily net cash position of the portfolio (e.g. - 50.000 EUR to +100.000 EUR) on a trading day.  OTR limits allow you to control the maximum order-to-trade ratio (number of orders divided by trades) of a portfolio per combination of exchange and delivery area.  The element \"trading period\" is only used in special configurations and can only be set on portfolio level on historical servers, so it should be let empty in most cases.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portfolio_risk_management_settings(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskManagementSettings body: (required)
        :param str id: id of the portfolio (not equal to the portfolio's name) (required)
        :return: RiskManagementSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_portfolio_risk_management_settings_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_portfolio_risk_management_settings_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_portfolio_risk_management_settings_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update the portfolio's risk management settings  # noqa: E501

        Change the risk management settings for a specific portfolio. You need to use the master-API-key or tenant-master-API-key to perform this operation.  To give a portfolio access to delivery areas, configure a list of combinations of exchange and delivery-area within the risk management element. Be aware that the portfolio can only use delivery areas configured within the tenant.  In addition, position limits can be set for combination of exchange and delivery area and allow you to control the net position of the portfolio in MW (min_net_pos_limit and max_net_pos_limit, e.g. -20 MW and +50 MW) and the absolute trading volume in MW (abspos_limit, e.g. 100 MW).  Cash limits are configured per currency and allow you to control the daily net cash position of the portfolio (e.g. - 50.000 EUR to +100.000 EUR) on a trading day.  OTR limits allow you to control the maximum order-to-trade ratio (number of orders divided by trades) of a portfolio per combination of exchange and delivery area.  The element \"trading period\" is only used in special configurations and can only be set on portfolio level on historical servers, so it should be let empty in most cases.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portfolio_risk_management_settings_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskManagementSettings body: (required)
        :param str id: id of the portfolio (not equal to the portfolio's name) (required)
        :return: RiskManagementSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_portfolio_risk_management_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_portfolio_risk_management_settings`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_portfolio_risk_management_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/portfolio/{id}/risk-management', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RiskManagementSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
