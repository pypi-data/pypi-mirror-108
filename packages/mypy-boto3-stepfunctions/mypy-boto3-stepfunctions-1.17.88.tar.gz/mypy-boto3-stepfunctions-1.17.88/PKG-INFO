Metadata-Version: 2.1
Name: mypy-boto3-stepfunctions
Version: 1.17.88
Summary: Type annotations for boto3.SFN 1.17.88 service, generated by mypy-boto3-buider 4.14.1
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Description: # mypy-boto3-stepfunctions<a id="mypy-boto3-stepfunctions"></a>
        
        [![PyPI - mypy-boto3-stepfunctions](https://img.shields.io/pypi/v/mypy-boto3-stepfunctions.svg?color=blue)](https://pypi.org/project/mypy-boto3-stepfunctions)
        [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-stepfunctions.svg?color=blue)](https://pypi.org/project/mypy-boto3-stepfunctions)
        [![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
        [![PyPI - Downloads](https://img.shields.io/pypi/dw/mypy-boto3-stepfunctions?color=blue)](https://pypistats.org/packages/mypy-boto3-stepfunctions)
        
        ![boto3.typed](https://github.com/vemel/mypy_boto3_builder/raw/master/logo.png)
        
        Type annotations for
        [boto3.SFN 1.17.88](https://boto3.amazonaws.com/v1/documentation/api/1.17.88/reference/services/stepfunctions.html#SFN)
        service compatible with [VSCode](https://code.visualstudio.com/),
        [PyCharm](https://www.jetbrains.com/pycharm/),
        [Emacs](https://www.gnu.org/software/emacs/),
        [Sublime Text](https://www.sublimetext.com/),
        [mypy](https://github.com/python/mypy),
        [pyright](https://github.com/microsoft/pyright) and other tools.
        
        Generated by
        [mypy-boto3-buider 4.14.1](https://github.com/vemel/mypy_boto3_builder).
        
        More information can be found on
        [boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in
        [mypy-boto3-stepfunctions docs](https://vemel.github.io/boto3_stubs_docs/mypy_boto3_stepfunctions/)
        
        See how it helps to find and fix potential bugs:
        
        ![boto3-stubs demo](https://github.com/vemel/mypy_boto3_builder/raw/master/demo.gif)
        
        - [mypy-boto3-stepfunctions](#mypy-boto3-stepfunctions)
          - [How to install](#how-to-install)
          - [Usage](#usage)
            - [VSCode](#vscode)
            - [PyCharm](#pycharm)
            - [Other IDEs](#other-ides)
            - [mypy](#mypy)
            - [pyright](#pyright)
          - [Explicit type annotations](#explicit-type-annotations)
            - [Client annotations](#client-annotations)
            - [Paginators annotations](#paginators-annotations)
            - [Literals](#literals)
            - [Typed dictionaries](#typed-dictionaries)
          - [Versioning](#versioning)
          - [Documentation](#documentation)
          - [Support and contributing](#support-and-contributing)
        
        ## How to install<a id="how-to-install"></a>
        
        Install `boto3-stubs` for `SFN` service.
        
        ```bash
        python -m pip install boto3-stubs[stepfunctions]
        ```
        
        ## Usage<a id="usage"></a>
        
        ### VSCode<a id="vscode"></a>
        
        - Install
          [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
        - Install
          [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
        - Set `Pylance` as your Python Language Server
        - Install `boto-stubs[stepfunctions]` in your environment:
          `python -m pip install 'boto3-stubs[stepfunctions]'`
        
        Both type checking and auto-complete should work for `SFN` service. No explicit
        type annotations required, write your `boto3` code as usual.
        
        ### PyCharm<a id="pycharm"></a>
        
        - Install `boto-stubs[stepfunctions]` in your environment:
          `python -m pip install 'boto3-stubs[stepfunctions]'`
        
        Both type checking and auto-complete should work for `SFN` service. No explicit
        type annotations required, write your `boto3` code as usual. Auto-complete can
        be slow on big projects or if you have a lot of installed `boto3-stubs`
        submodules.
        
        ### Other IDEs<a id="other-ides"></a>
        
        Not tested, but as long as your IDE support `mypy` or `pyright`, everything
        should work.
        
        ### mypy<a id="mypy"></a>
        
        - Install `mypy`: `python -m pip install mypy`
        - Install `boto-stubs[stepfunctions]` in your environment:
          `python -m pip install 'boto3-stubs[stepfunctions]'`
        - Run `mypy` as usual
        
        Type checking should work for `SFN` service. No explicit type annotations
        required, write your `boto3` code as usual.
        
        ### pyright<a id="pyright"></a>
        
        - Install `pyright`: `yarn global add pyright`
        - Install `boto-stubs[stepfunctions]` in your environment:
          `python -m pip install 'boto3-stubs[stepfunctions]'`
        - Optionally, you can install `boto3-stubs` to `typings` folder.
        
        Type checking should work for `SFN` service. No explicit type annotations
        required, write your `boto3` code as usual.
        
        ## Explicit type annotations<a id="explicit-type-annotations"></a>
        
        ### Client annotations<a id="client-annotations"></a>
        
        `SFNClient` provides annotations for `boto3.client("stepfunctions")`.
        
        ```python
        import boto3
        
        from mypy_boto3_stepfunctions import SFNClient
        
        client: SFNClient = boto3.client("stepfunctions")
        
        # now client usage is checked by mypy and IDE should provide code auto-complete
        
        # works for session as well
        session = boto3.session.Session(region="us-west-1")
        session_client: SFNClient = session.client("stepfunctions")
        ```
        
        ### Paginators annotations<a id="paginators-annotations"></a>
        
        `mypy_boto3_stepfunctions.paginator` module contains type annotations for all
        paginators.
        
        ```python
        from mypy_boto3_stepfunctions import SFNClient
        from mypy_boto3_stepfunctions.paginator import (
            GetExecutionHistoryPaginator,
            ListActivitiesPaginator,
            ListExecutionsPaginator,
            ListStateMachinesPaginator,
        )
        
        client: SFNClient = boto3.client("stepfunctions")
        
        # Explicit type annotations are optional here
        # Type should be correctly discovered by mypy and IDEs
        # VSCode requires explicit type annotations
        get_execution_history_paginator: GetExecutionHistoryPaginator = client.get_paginator("get_execution_history")
        list_activities_paginator: ListActivitiesPaginator = client.get_paginator("list_activities")
        list_executions_paginator: ListExecutionsPaginator = client.get_paginator("list_executions")
        list_state_machines_paginator: ListStateMachinesPaginator = client.get_paginator("list_state_machines")
        ```
        
        ### Literals<a id="literals"></a>
        
        `mypy_boto3_stepfunctions.literals` module contains literals extracted from
        shapes that can be used in user code for type checking.
        
        ```python
        from mypy_boto3_stepfunctions.literals import (
            ExecutionStatusType,
            GetExecutionHistoryPaginatorName,
            HistoryEventTypeType,
            ListActivitiesPaginatorName,
            ListExecutionsPaginatorName,
            ListStateMachinesPaginatorName,
            LogLevelType,
            StateMachineStatusType,
            StateMachineTypeType,
            SyncExecutionStatusType,
        )
        
        def check_value(value: ExecutionStatusType) -> bool:
            ...
        ```
        
        ### Typed dictionaries<a id="typed-dictionaries"></a>
        
        `mypy_boto3_stepfunctions.type_defs` module contains structures and shapes
        assembled to typed dictionaries for additional type checking.
        
        ```python
        from mypy_boto3_stepfunctions.type_defs import (
            ActivityFailedEventDetailsTypeDef,
            ActivityListItemTypeDef,
            ActivityScheduleFailedEventDetailsTypeDef,
            ActivityScheduledEventDetailsTypeDef,
            ActivityStartedEventDetailsTypeDef,
            ActivitySucceededEventDetailsTypeDef,
            ActivityTimedOutEventDetailsTypeDef,
            BillingDetailsTypeDef,
            CloudWatchEventsExecutionDataDetailsTypeDef,
            CloudWatchLogsLogGroupTypeDef,
            CreateActivityOutputTypeDef,
            CreateStateMachineOutputTypeDef,
            DescribeActivityOutputTypeDef,
            DescribeExecutionOutputTypeDef,
            DescribeStateMachineForExecutionOutputTypeDef,
            DescribeStateMachineOutputTypeDef,
            ExecutionAbortedEventDetailsTypeDef,
            ExecutionFailedEventDetailsTypeDef,
            ExecutionListItemTypeDef,
            ExecutionStartedEventDetailsTypeDef,
            ExecutionSucceededEventDetailsTypeDef,
            ExecutionTimedOutEventDetailsTypeDef,
            GetActivityTaskOutputTypeDef,
            GetExecutionHistoryOutputTypeDef,
            HistoryEventExecutionDataDetailsTypeDef,
            HistoryEventTypeDef,
            LambdaFunctionFailedEventDetailsTypeDef,
            LambdaFunctionScheduleFailedEventDetailsTypeDef,
            LambdaFunctionScheduledEventDetailsTypeDef,
            LambdaFunctionStartFailedEventDetailsTypeDef,
            LambdaFunctionSucceededEventDetailsTypeDef,
            LambdaFunctionTimedOutEventDetailsTypeDef,
            ListActivitiesOutputTypeDef,
            ListExecutionsOutputTypeDef,
            ListStateMachinesOutputTypeDef,
            ListTagsForResourceOutputTypeDef,
            LogDestinationTypeDef,
            LoggingConfigurationTypeDef,
            MapIterationEventDetailsTypeDef,
            MapStateStartedEventDetailsTypeDef,
            PaginatorConfigTypeDef,
            ResponseMetadataTypeDef,
            StartExecutionOutputTypeDef,
            StartSyncExecutionOutputTypeDef,
            StateEnteredEventDetailsTypeDef,
            StateExitedEventDetailsTypeDef,
            StateMachineListItemTypeDef,
            StopExecutionOutputTypeDef,
            TagTypeDef,
            TaskFailedEventDetailsTypeDef,
            TaskScheduledEventDetailsTypeDef,
            TaskStartFailedEventDetailsTypeDef,
            TaskStartedEventDetailsTypeDef,
            TaskSubmitFailedEventDetailsTypeDef,
            TaskSubmittedEventDetailsTypeDef,
            TaskSucceededEventDetailsTypeDef,
            TaskTimedOutEventDetailsTypeDef,
            TracingConfigurationTypeDef,
            UpdateStateMachineOutputTypeDef,
        )
        
        def get_structure() -> ActivityFailedEventDetailsTypeDef:
            return {
              ...
            }
        ```
        
        ## Versioning<a id="versioning"></a>
        
        `mypy-boto3-stepfunctions` version is the same as related `boto3` version and
        follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.
        
        ## Documentation<a id="documentation"></a>
        
        All type annotations can be found in
        [mypy-boto3-stepfunctions docs](https://vemel.github.io/boto3_stubs_docs/mypy_boto3_stepfunctions/)
        
        ## Support and contributing<a id="support-and-contributing"></a>
        
        This package is auto-generated. Please reports any bugs or request new features
        in [mypy-boto3-builder](https://github.com/vemel/mypy_boto3_builder/issues/)
        repository.
        
Keywords: boto3 stepfunctions type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
